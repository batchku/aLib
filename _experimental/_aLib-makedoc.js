/*simple example of iterating through the files in a folder*///outlets = 1;// global varables and codevar vbox;var vx=200;var vy=200;var counter = 0;var aLib = new Array();function newdefault(vect){	var i;	var a = new Array();	//var vect = arrayfromargs(arguments);	//post("in to newdefault: ", vect,"\n");		//if (vbox)	//	this.patcher.remove(vbox);		//post("arguments to newdefault", a, "\n");	aLib[counter]["folders"] = this.patcher.newdefault(vect);}/* function location(x,y){	vx = x;	vy = y;	if (vbox) {		var width,height;		var r = new Array();				width  = vbox.rect[2] - vbox.rect[0];		height = vbox.rect[3] - vbox.rect[1];		r[0] = x;		r[1] = y;		r[2] = x+width;		r[3] = y+height;				vbox.rect = r;	}}*/function sizebox(width,height){	if (vbox) {		var r = new Array();				r[0] = vbox.rect[0];		r[1] = vbox.rect[1];		r[2] = vbox.rect[0]+width;		r[3] = vbox.rect[1]+height;				vbox.rect = r;	}}function hidebox(hidden){	if (vbox) {		vbox.hidden = hidden;	}}function sendbox(){	var i;	var a = new Array();		// send any message the box understands to the box	if (vbox) {		if (vbox.understands(arguments[0])) {				for (i=0;i<(arguments.length-1);i++)				a[i] = arguments[i+1];			vbox[arguments[0]](a);		} else {			post("doesn't understand" + arguments[0] + "\n");		}	}}function anything(){	var f = new Folder(messagename);	counter = 0;	f.reset();		while (!f.end) {		var thefile = new File(f.pathname + "/" + f.filename);		/*if (thefile.isopen) {			outlet(4,thefile.eof);			thefile.close();		} else {			outlet(4,0);		}*/		if (f.filetype=="fold") {			//post("a folder: ",f.filename, "\n");			//location(100,100+counter*18)			//newone = new Array("patcher", f.filename);			//post("folder name: ", f.filename, "\n");			//post("args: ",newone, "\n");			//post("1. counter at: ",counter, "\n");			       			aLib[counter] = new Array();			aLib[counter]["umenuPanel"] = new Array();			aLib[counter]["commentPanel"] = new Array();			aLib[counter]["umenu"] = new Array();			aLib[counter]["comment"] = new Array();			aLib[counter]["folders"] = this.patcher.newdefault([100, 100 + counter * 18, "patcher", f.filename]);			thePatcher = aLib[counter]["folders"].subpatcher();			thePatcherWind = thePatcher.wind;			thePatcherWind.location=[50, 50, 850, 650];			//thePatcherWind.visible=0;			thePatcherWind.title=f.filename;						thePatcher.newobject("comment",25, 25 ,300, 196632, f.filename);    			//post("2. counter at: ",counter, "\n");			//go into each folder			var ff = new Folder(f.pathname + "/" + f.filename);			ff.reset();			counterHelps = 0;			while (!ff.end) {			    if (ff.filename.match(".help") != null ) {			        //post("here's one: ", ff.filename, "\n");			        //post("3. counter at: ",counter, "\n");			        			        			        //aLib[counter]["umenu"][counterHelps]=this.patcher.newobject("umenu",230, 100 + counterHelps*18,400, 0, ff.filename);			        //aLib[counter]["umenu"][counterHelps]=aLib[counter]["folders"].newobject("umenu",230, 100 + counterHelps*18,400, 0, ff.filename.replace(".help",""));			       			        //aLib[counter]["umenuPanel"][counterHelps].sendtoback();			        //aLib[counter]["commentPanel"][counterHelps]=thePatcher.newobject("panel",305, 100 + counterHelps*18,200, 0);			        			        // make umenu			        aLib[counter]["umenu"][counterHelps]=thePatcher.newdefault(60, 60 + counterHelps*18,"umenu");			        aLib[counter]["umenu"][counterHelps].rect=[60, 60 + counterHelps*18,205,60 + counterHelps*18+14];			        aLib[counter]["umenu"][counterHelps].append(ff.filename.replace(".help",""));			        aLib[counter]["umenu"][counterHelps].mode(3);			        //make umenu panel			        aLib[counter]["umenuPanel"][counterHelps]=thePatcher.newdefault(60, 60 + counterHelps*18,"panel");			        aLib[counter]["umenuPanel"][counterHelps].rect=[60, 60 + counterHelps*18, 210, 60 + counterHelps*18 +17];			        aLib[counter]["umenuPanel"][counterHelps].border(0);			        //make comment			        aLib[counter]["comment"][counterHelps]=thePatcher.newobject("comment",215, 60 + counterHelps*18 + 2,300, 0);			        //make comment panel			        aLib[counter]["commentPanel"][counterHelps]=thePatcher.newdefault(215, 60 + counterHelps*18,"panel");			        aLib[counter]["commentPanel"][counterHelps].rect=[212, 60 + counterHelps*18, 530, 60 + counterHelps*18 +17];			        aLib[counter]["commentPanel"][counterHelps].border(0);			       			        counterHelps= counterHelps + 1;			    }			    ff.next();			}			if (counterHelps>0) {				aLib[counter]["prependHelp"]=thePatcher.newdefault(60, 1000, "prepend","help");				aLib[counter]["pcontrol"]=thePatcher.newdefault(60, 1020, "pcontrol");				thePatcher.connect(aLib[counter]["prependHelp"],0,aLib[counter]["pcontrol"],0);				for (k=0;k<counterHelps;k++) {					thePatcher.connect(aLib[counter]["umenu"][k],1,aLib[counter]["prependHelp"],0);				}				}			ff.close();			//post("4. counter at: ",counter, "\n");			counter = counter + 1;			//post("5. counter at: ",counter, "\n");		}		f.next();		//post("counter ", counter, "\n");	}	f.close();}function test()    {    newdefault([100,100,"pack","1", "2"]);    }/* function anything(){	var f = new Folder(messagename);		outlet(6,f.pathname);	outlet(5,f.count);	f.reset();	while (!f.end) {		var thefile = new File(f.pathname + "/" + f.filename);		if (thefile.isopen) {			outlet(4,thefile.eof);			thefile.close();		} else {			outlet(4,0);		}		outlet(3,f.filetype);		outlet(2,f.extension);		outlet(1,f.moddate);		outlet(0,f.filename);		f.next();	}	f.close();}*/function recursefolders(v){	var f = new Folder(v);		outlet(6,f.pathname);	outlet(5,f.count);	f.reset();	while (!f.end) {		if (f.filetype == "fold") {			var foldername;			// if path doesn't end with a slash add one 			if (f.pathname.charAt(f.pathname.length-1) != "/")				foldername = f.pathname + "/" + f.filename;			else				foldername =  f.pathname + f.filename			recursefolders(foldername);		}		f.next();	}	f.close();}