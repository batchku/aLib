inlets = 1;outlets = 2;var size = 200;var counter = -1;var xfade = new JitterObject("jit.xfade");var outmatrix = new JitterMatrix();var matrices = new Array();function insert(inname){		counter= (counter + 1 ) % size;	matrices[counter] = new JitterMatrix();	matrices[counter].setinfo(inname);	matrices[counter].frommatrix(inname);	//post("inserting ", inname, " at counter ", counter," \n");	}function output(delay) {	/* post("counter: ", counter, "\n");	post("delay: ", delay, "\n");	post("index: ", ((counter - delay) + size) % size, "\n");	*/	outlet(0,"jit_matrix",matrices[((counter - delay) + size) % size].name);	}function xoutput(fdelay){	f = ((counter - parseInt(fdelay)) + size) % size;	var firstframe = matrices[parseInt(f)];	outmatrix=new JitterMatrix();	outmatrix.setinfo(firstframe);	xfade.xfade=fdelay % 1;	xfade.matrixcalc([firstframe,matrices[parseInt(f)+1]],outmatrix);	outlet(0,"jit_matrix",outmatrix.name);}function setsize(s) {	size = s;	}