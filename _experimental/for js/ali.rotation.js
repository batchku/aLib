inlets = 1;outlets = 2;// heading = rotation about y (applied first) = ay// attitude = angle about z (applied second) = az// bank= angle about x (applied last) = axfunction xyz2angleaxis(){		var bank = arguments[0];	var heading = arguments[1];	var attitude = arguments[2];	// to normalise divide x,y and z by:	// sqrt(x2 + y2 + z2) = sqrt((s1 s2 c3 +c1 c2 s3)2+(s1 c2 c3 + c1 s2 s3)2+(c1 s2 c3 - s1 c2 s3)2)	// where:	with (Math) {		var c1 = cos(heading / 2);		var c2 = cos(attitude / 2);		var c3 = cos(bank / 2);		var s1 = sin(heading / 2);		var s2 = sin(attitude / 2);		var s3 = sin(bank / 2);				var angle = 2 * acos(c1*c2*c3 - s1*s2*s3);		var x = s1 * s2 * c3 + c1 * c2 * s3;		var y = s1 * c2  *c3 + c1 * s2 *s3;		var z = c1 * s2 * c3 - s1 * c2 * s3;		angle = angle / Math.PI * 180.; 		// post("here: \n", "x: ", x, "  y: ", y, "  z: ", z, "  angle: ", angle);	}	outlet(0, angle, x, y, z);}function angleaxis2xyz(){	var heading, attitude, bank;	var rotation = new Array(3);		angle=arguments[0];	angle=angle/180*Math.PI;		x=arguments[1];	y=arguments[2];	z=arguments[3];		with (Math) {	yrot = atan2(y * sin(angle)- x * z * (1 - cos(angle)),1 - (y*y + z*z ) * (1 - cos(angle)) );	zrot = asin(x * y * (1 - cos(angle)) + z * sin(angle));	xrot = atan2(x * sin(angle)-y * z * (1 - cos(angle)),1 - (x*x + z*z) * (1 - cos(angle)) );	}	rotation=[xrot,yrot,zrot];		outlet(0,rotation);}function xyz2rotmatrix_fucked (){	var xang = arguments[0];	var yang = arguments[1];	var zang = arguments[2];	var m = new Array(3);	m[0] = new Array(3);	m[1] = new Array(3);	m[2] = new Array(3);		cx = Math.cos(xang);	sx = Math.sin(xang);	cy = Math.cos(yang);	sy = Math.sin(yang);	cz = Math.cos(zang);	sz = Math.sin(zang);	m[0][0] = cy * cz;	m[0][1] = sx * sy * cz + cx * (-sz);	m[0][2] = cx * sy * cz + sx * sz;	m[1][0] = cy * sz;	m[1][1] = sx * sy * sz + cx * cz;	m[1][2] = cx * cy * sz - sx * cz;	m[2][0] = -sy;	m[2][1] = sx * cy;	m[2][2] = cx * cy;					for (i=0;i<3; i++) {		for (j=0;j<3; j++) { 			outlet(1,"setcell",i,j,"val",m[i][j]);		}	}	outlet(1, "bang");	}function xyz2rotmatrix_fucker (){	var zang1 = arguments[0];	var yang = arguments[1];	var zang2 = arguments[2];	var m = new Array(3);	m[0] = new Array(3);	m[1] = new Array(3);	m[2] = new Array(3);		cz1 = Math.cos(zang1);	sz1 = Math.sin(zang1);	cy = Math.cos(yang);	sy = Math.sin(yang);	cz2 = Math.cos(zang2);	sz2 = Math.sin(zang2);	m[0][0] = cz1 * cy * cz2 - sz1 * sz2;	m[0][1] = -cy * sz1 - cx * cy * sz2;	m[0][2] = cz1 * sy;	m[1][0] = cy * cz2 * sz1 + cz1 * sz2;	m[1][1] = cz1 * cz2 - cy * sz1 * sz2;	m[1][2] = sz1 * sy;	m[2][0] = -cz2 * sy;	m[2][1] = sy * sz2;	m[2][2] = cy;					for (i=0;i<3; i++) {		for (j=0;j<3; j++) { 			outlet(1,"setcell",i,j,"val",m[i][j]);		}	}	outlet(1, "bang");	}function xyz2rotmatrix(){	var bank = arguments[0];	var heading = arguments[1];	var attitude = arguments[2];	var m = new Array(3);	m[0] = new Array(3);	m[1] = new Array(3);	m[2] = new Array(3);	ch = Math.cos(heading);	sh = Math.sin(heading);	ca = Math.cos(attitude);	sa = Math.sin(attitude);	cb = Math.cos(bank);	sb = Math.sin(bank);		m[0][0] = ch * ca;	m[0][1] = sh*sb - ch*sa*cb;	m[0][2] = ch*sa*sb + sh*cb;	m[1][0] = sa;	m[1][1] = ca*cb;	m[1][2] = -ca*sb;	m[2][0] = -sh*ca;	m[2][1] = sh*sa*cb + ch*sb;	m[2][2] = -sh*sa*sb + ch*cb;		for (i=0;i<3; i++) {		for (j=0;j<3; j++) { 			outlet(1,"setcell",i,j,"val",m[i][j]);		}	}		outlet(1, "bang");}